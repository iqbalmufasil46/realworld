name: CI/CD Pipeline with Rollback, Monitoring, and Stress Testing

on:
  push:
    branches:
      - main
      - dev/*
      - staging/*
      - production/*

env:
  ACR_NAME: conduitacr
  RESOURCE_GROUP: ConduitResourceGroup
  AKS_CLUSTER: ConduitAKS

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Set up AKS credentials
    - name: Set up AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER }}

    # Step 4: Apply deployment.yaml if modified
    - name: Apply deployment.yaml if modified
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "deployment.yaml"; then
          echo "Detected changes in deployment.yaml. Applying to Kubernetes..."
          kubectl apply -f deployment.yaml
        else
          echo "No changes in deployment.yaml detected. Skipping Kubernetes application."
        fi

    # Step 5: Build and push Docker image
    - name: Build and push Docker image
      run: |
        az acr login --name ${{ env.ACR_NAME }}
        BRANCH=$(echo ${{ github.ref_name }} | tr '/' '-')
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/conduit-app:${{ github.sha }}-${BRANCH} .
        docker push ${{ env.ACR_NAME }}.azurecr.io/conduit-app:${{ github.sha }}-${BRANCH}

    # Step 6: Deploy to AKS with namespace detection
    - name: Deploy to AKS
      id: deploy
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        kubectl set image deployment/conduit-app conduit-app=${{ env.ACR_NAME }}.azurecr.io/conduit-app:${{ github.sha }}-${BRANCH} -n $NAMESPACE --record

    # Step 7: Verify Deployment Rollout
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Verify Deployment Rollout
      id: verify
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        kubectl rollout status deployment conduit-app -n $NAMESPACE --timeout=300s
        kubectl get pods -n $NAMESPACE --selector=app=conduit-app -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name'

      continue-on-error: true

    # Step 8: Rollback Deployment on Failure
    - name: Rollback Deployment on Failure
      if: failure() && steps.verify.outcome == 'failure'
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        echo "Deployment verification failed. Rolling back..."
        kubectl rollout undo deployment conduit-app -n $NAMESPACE

    # Step 9: Stress Test Deployment (Optional)
    - name: Stress Test Deployment
      if: github.ref == 'refs/heads/main'
      run: |
        k6 run stress-test.js || echo "Stress test failed. Investigate the issue."

