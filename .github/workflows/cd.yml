name: CI/CD Pipeline with Rollback and Deployment Validation

on:
  push:
    branches:
      - main
      - dev/*
      - staging/*
      - production/*

env:
  ACR_NAME: conduitacr
  RESOURCE_GROUP: ConduitResourceGroup
  AKS_CLUSTER: ConduitAKS
  DEPLOYMENT_NAME: conduit-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Set up AKS credentials
    - name: Set up AKS Credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER }}

    # Step 4: Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        az acr login --name ${{ env.ACR_NAME }}
        BRANCH=$(echo ${{ github.ref_name }} | tr '/' '-')
        IMAGE_TAG=${{ github.sha }}-${BRANCH}
        echo "Building and pushing image: $IMAGE_TAG"
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/conduit-app:$IMAGE_TAG .
        docker push ${{ env.ACR_NAME }}.azurecr.io/conduit-app:$IMAGE_TAG

    # Step 5: Deploy to Kubernetes with namespace detection
    - name: Deploy to Kubernetes
      id: deploy
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        IMAGE_TAG=${{ github.sha }}-$(echo ${{ github.ref_name }} | tr '/' '-')
        echo "Updating deployment in namespace: $NAMESPACE with image: $IMAGE_TAG"
        kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
          ${{ env.DEPLOYMENT_NAME }}=${{ env.ACR_NAME }}.azurecr.io/conduit-app:$IMAGE_TAG \
          -n $NAMESPACE --record

    # Step 6: Verify Deployment Rollout
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Verify Deployment Rollout
      id: verify
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        echo "Verifying rollout status for deployment in namespace: $NAMESPACE"
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n $NAMESPACE --timeout=300s
        kubectl get pods -n $NAMESPACE --selector=app=${{ env.DEPLOYMENT_NAME }} -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name'

      continue-on-error: true

    # Step 7: Rollback Deployment on Failure
    - name: Rollback Deployment on Failure
      if: failure() && steps.verify.outcome == 'failure'
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        echo "Deployment verification failed. Rolling back..."
        kubectl rollout undo deployment/${{ env.DEPLOYMENT_NAME }} -n $NAMESPACE

    # Step 8: Confirm Deployment Update
    - name: Confirm Deployment Image
      run: |
        NAMESPACE=$(echo ${{ github.ref }} | grep -oE "dev|staging|production" || echo "dev")
        echo "Deployment updated with image:"
        kubectl get deployment/${{ env.DEPLOYMENT_NAME }} -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}'

    # Optional Step: Stress Test Deployment (For main branch only)
    - name: Stress Test Deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Running stress tests..."
        k6 run stress-test.js || echo "Stress test failed. Investigate the issue."

